        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2016
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>              // assert
        -:   12:#include <iostream>             // endl, istream, ostream
        -:   13:#include <sstream>              // istringstream
        -:   14:#include <string>               // getline, string
        -:   15:#include <utility>              // make_pair, pair
        -:   16:#include <math.h>               // pow
        -:   17:
        -:   18:#include "Collatz.h"
        -:   19:
        -:   20:using namespace std;
        -:   21:
        -:   22:#define CACHE
        -:   23:
        -:   24:// ------------
        -:   25:// collatz_read
        -:   26:// ------------
        -:   27:
function _Z12collatz_readRKSs called 14 returned 100% blocks executed 80%
       14:   28:pair<int, int> collatz_read (const string& s) {
       14:   29:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   30:    int i;
        -:   31:    int j;
       14:   32:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       14:   33:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   34:
        -:   35:// ------------
        -:   36:// collatz_eval
        -:   37:// ------------
        -:   38:
        -:   39:long c[32] = {0,3,2,2,2,2,2,4,1,4,1,3,2,2,3,4,1,2,3,3,1,1,3,3,2,3,2,4,3,3,4,5};
        -:   40:long d[32] = {0,2,1,1,2,2,2,20,1,26,1,10,4,4,13,40,2,5,17,17,2,2,20,20,8,22,8,71,26,26,80,242};
        -:   41:
        -:   42:#ifdef CACHE
        -:   43:int storage[33] = {0,1,2,8,3,6,9,17,4,20,7,15,10,10,18,18,5,13,21,21,8,8,16,16,11,24,11,112,19,19,19,107,6};
        -:   44:#endif
        -:   45:
function _Z12collatz_evalii called 21 returned 100% blocks executed 75%
       21:   46:int collatz_eval (int i, int j) {
        -:   47:
       21:   48:    assert(i > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:   49:    assert(j > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:   50:    assert(i <= 1000000);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:   51:    assert(j <= 1000000);  
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   52:
       21:   53:    if(j < i) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   54:        int temp = j;
    #####:   55:        j = i;
    #####:   56:        i = temp;
        -:   57:    } 
        -:   58:
        -:   59:    //check if the search space can be reduce by half
        -:   60:    //save time by not searching for interval that would not contain the max cycle length
       21:   61:    int m = (j - i) / 2;
       21:   62:    if(m > i)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        2:   63:        i = m;
        -:   64:    
       21:   65:    int max = -1;
        -:   66:
      533:   67:    for(int p = i; p <= j; ++p) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   68:
      512:   69:        int step = 1;
        -:   70:
      512:   71:        long q = (long)p;
        -:   72:
        -:   73:        //an time space trade oof optimization based on modular restriction
        -:   74:        //this algorithm allows the program to calculate the value of 3n+1/n/2 5 steps ahead
        -:   75:        //cut meaningless computation on value that is not the final answer
     3867:   76:        while(q > 32 ) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
     2843:   77:            long a = q >> 5;
     2843:   78:            long b = q % 32;
     2843:   79:            q = a * (long)pow(3, c[(int)b]) + d[(int)b];
     2843:   80:            step += 5 + c[(int)b];
        -:   81:        }
        -:   82:
        -:   83:        //the only cache implemented
        -:   84:        //tried storing and retrieving cache at other location, but it only slows down the program
        -:   85:        #ifdef CACHE
      512:   86:        step += storage[(int)q] - 1;
      512:   87:        q = 1;
        -:   88:        #endif 
        -:   89:
        -:   90:        //if no cache, then return to the old method
        -:   91:        #ifndef CACHE
        -:   92:        while(q > 1) {
        -:   93:            if((q % 2) == 0) {
        -:   94:                q = q / 2;
        -:   95:                ++step;
        -:   96:            }
        -:   97:            else {
        -:   98:                q = q + (q >> 1) + 1;
        -:   99:                step += 2;
        -:  100:            }
        -:  101:        }
        -:  102:        #endif
        -:  103:
      512:  104:        if(step > max)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       72:  105:            max = step;
        -:  106:    }
        -:  107:
       21:  108:    assert(max > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
       21:  109:    return max;
        -:  110:}
        -:  111:    
        -:  112:// -------------
        -:  113:// collatz_print
        -:  114:// -------------
        -:  115:
function _Z13collatz_printRSoiii called 14 returned 100% blocks executed 100%
       14:  116:void collatz_print (ostream& w, int i, int j, int v) {
       14:  117:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:  118:
        -:  119:// -------------
        -:  120:// collatz_solve
        -:  121:// -------------
        -:  122:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 80%
        2:  123:void collatz_solve (istream& r, ostream& w) {
        2:  124:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  125:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 83%
branch  7 taken 17% (fallthrough)
       10:  126:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10:  127:        const int            i = p.first;
       10:  128:        const int            j = p.second;
       10:  129:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       15:  130:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
